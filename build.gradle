buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.0"
        classpath "net.serenity-bdd:serenity-gradle-plugin:2.6.0"
    }}
plugins {
    id "java"
    id "org.sonarqube" version "3.0"
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: "net.serenity-bdd.serenity-gradle-plugin"
apply plugin: 'org.sonarqube'
defaultTasks 'clean', 'test', 'aggregate'


repositories {
    mavenCentral()
}

group 'org.example'
version '1.0-SNAPSHOT'


ext {
    libs = [
            test    : [
                    owner   : "org.aeonbits.owner:owner:${ownerVersion}",
                    junit   : "junit:junit:${junitVersion}",
                    faker   : "com.github.javafaker:javafaker:0.16",
                    serenity: [
                            core               : "net.serenity-bdd:serenity-core:${serenityCoreVersion}",
                            serenityUnit       : "net.serenity-bdd:serenity-junit:${serenityCoreVersion}",
                            screenplay         : "net.serenity-bdd:serenity-screenplay:${serenityCoreVersion}",
                            screenplayWebdriver: "net.serenity-bdd:serenity-screenplay-webdriver:${serenityCoreVersion}",
                            cucumber           : "net.serenity-bdd:serenity-cucumber6:${serenityCucumberVersion}",
                            rest               : "net.serenity-bdd:serenity-rest-assured:${serenityRestAssured}",
                            screenpplayrest    : "net.serenity-bdd:serenity-screenplay-rest:${serenityCoreVersion}",
                    ],
                    sonar   :"org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.0"
            ]
    ]
}
allprojects {
    apply plugin: 'org.sonarqube'
}
sonarqube {
    properties {
        property "sonar.sources", "src"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.java.binaries", "build/classes"
        property "sonar.coverage.exclusions", "**/*.java"
        property "sonar.test.inclusions","src/test/java/*"
        property "sonar.tests", ""
    }
}

dependencies {
    implementation libs.test.owner,
            libs.test.junit
    testImplementation libs.test.serenity.core,
            libs.test.serenity.screenplay,
            libs.test.serenity.serenityUnit,
            libs.test.serenity.screenplayWebdriver,
            libs.test.serenity.cucumber,
            libs.test.serenity.rest,
            libs.test.junit,
            libs.test.faker,
            libs.test.serenity.screenpplayrest

}
test {
    testLogging.showStandardStreams = true
    systemProperties System.getProperties()
}

gradle.startParameter.continueOnFailure = true

test.finalizedBy(aggregate)